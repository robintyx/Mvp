server:
  port: 17083
  tomcat:
    threads:
      min-spare: 50 #最小线程数
      max: 10000 #最大线程数
    max-connections: 5000 #最大连接数
    uri-encoding: UTF-8 #编码方式
    max-http-form-post-size: 0 #post提交数据最大大小，设置为0不限制
    connection-timeout: 10000 #连接超时时间
  servlet:
    session:
      timeout: 7200s
    context-path: /transferkafka

# springdoc-openapi项目配置
springdoc:
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    #operations-sorter: order
  api-docs:
    path: /v3/api-docs
  group-configs:
    - group: 'default'
      display-name: '感动'
      paths-to-match: '/**'
      packages-to-scan: cn.microvideo
  default-flat-param-object: true

knife4j:
  enable: true
  cors: false
  production: false
  setting:
    language: zh-CN
    enable-swagger-models: false
    enable-home-custom: true
    home-custom-path: classpath:knife4j/home.md
    enable-footer: false
    enable-footer-custom: true
    footer-custom-content: Apache License 2.0 | Copyright  2021-[南京感动科技有限公司]
  documents:
    - name: 标题1
      locations: classpath:knife4j/home.md
  basic:
    enable: true
    username: microvideo
    password: microvideo@2021351
spring:
  application:
    name: transfer-kafka-to-kafkahttp
  session:
    store-type: redis
    redis:
      flush-mode: ON_SAVE
      namespace: spring:session
  jmx:
    enabled: false
  resources:
    add-mappings: false
  main:
    allow-bean-definition-overriding: true
  servlet:
    multipart:
      max-file-size: 5MB
      max-request-size: 5MB
  thymeleaf:
    suffix: .html
    cache: false
    prefix: classpath:/templates/
    mode: HTML5
    encoding: UTF-8

logging:
  config: classpath:logback.xml
  level:
    root: info

microvideo:
  message:
    one-topic1: event_create,event_update,event_remove
    one-topic2: event_event-process_create,event_event-process_remove,event_event-task_update
    one-topic3: event-process-task_create,event-process-task_remove
    one-topic4: event-process-detail_create,event-process-detail_update,event-process-detail_remove
    one-topic5: test1
    one-topic6: test2
    one-topic7: test3
    one-topic8: test4
    batch-topic: test5
  kafka:
    consumer:
      servers: 192.168.103.190:9092
      #Kafka中没有初始偏移或如果当前偏移在服务器上不再存在时,默认区最新 ，有三个选项 【latest, earliest, none】
      auto-offset-reset: latest
      #是否开启自动提交
      enable-auto-commit: false
      #MANUAL_IMMEDIATE  listner负责ack，每调用一次，就立即commit
      ack-mode: MANUAL_IMMEDIATE
      #l连接超时，单位毫秒
      session-timeout: 20000
      #周期性自动提交的间隔，单位毫秒
      auto-commit-interval: 2000
      #key的解码方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      #value的解码方式
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      #在/usr/local/etc/kafka/consumer.properties中有配置
      group-id: microvideo-chae-kafka-transfer-dev
      #同时处理线程数，应设置与brocker数量一致
      concurrency: 2
      #每批最大条数，默认500
      max-poll-records: 5
      reconnect:backoff:max:ms:
  kafkatransfer:
    producers:
      - {
        code: 'P1' ,
        bootstrapServers: '139.198.179.91:9192' ,
        keySerializer: 'org.apache.kafka.common.serialization.StringSerializer' ,
        valueSerializer: 'org.apache.kafka.common.serialization.StringSerializer',
        props: {"[security.protocol]": "SASL_PLAINTEXT", "[sasl.mechanism]": "PLAIN", "[sasl.jaas.config]": "org.apache.kafka.common.security.scram.ScramLoginModule required username=\"GduserB\" password=\"Mv.UserBR1.\";"}
      }
    targets:
      - {
        fromTopic: 'event_create' ,
        kafka: [{
          code: 'P1' ,
          topic: 'event_create',
        }]
      }
      - {
        fromTopic: 'event_update' ,
        kafka: [{
          code: 'P1' ,
          topic: 'event_update',
        }]
      }
      - {
        fromTopic: 'event_remove' ,
        kafka: [{
          code: 'P1' ,
          topic: 'event_remove',
        }]
      }
      - {
        fromTopic: 'event_event-process_create' ,
        kafka: [{
          code: 'P1' ,
          topic: 'event_event-process_create',
        }]
      }
      - {
        fromTopic: 'event_event-process_remove' ,
        kafka: [{
          code: 'P1' ,
          topic: 'event_event-process_remove',
        }]
      }
      - {
        fromTopic: 'event-process-task_update' ,
        kafka: [{
          code: 'P1' ,
          topic: 'event-process-task_update',
        }]
      }
      - {
        fromTopic: 'event-process-task_create' ,
        kafka: [{
          code: 'P1' ,
          topic: 'event-process-task_create',
        }]
      }
      - {
        fromTopic: 'event-process-task_remove' ,
        kafka: [{
          code: 'P1' ,
          topic: 'event-process-task_remove',
        }]
      }
      - {
        fromTopic: 'event-process-detail_create' ,
        kafka: [{
          code: 'P1' ,
          topic: 'event-process-detail_create',
        }]
      }
      - {
        fromTopic: 'event-process-detail_update' ,
        kafka: [{
          code: 'P1' ,
          topic: 'event-process-detail_update',
        }]
      }
      - {
        fromTopic: 'event-process-detail_remove' ,
        kafka: [{
          code: 'P1' ,
          topic: 'event-process-detail_remove',
        }]
      }



